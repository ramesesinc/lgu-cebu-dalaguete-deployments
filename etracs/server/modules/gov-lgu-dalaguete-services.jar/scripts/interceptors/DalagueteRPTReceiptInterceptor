import com.rameses.annotations.*
import com.rameses.eserver.*;
import com.rameses.common.*;

class DalagueteRPTReceiptInterceptor
{
	@PersistenceContext('rpt')
	def em

	@Service('RPTReceiptService')
	def svc 

	@Service('DalagueteRPTReceiptService')
	def svc2 

	@Service('EntityService')
	def entitySvc;

	@Service('Var')
	def var 

	@Service('RPTUtil')
	def util


	@After(pattern="PersistenceService.read", eval="#{ args[0]._schemaname == 'cashreceipt' && result.collectiontype?.handler?.toString().matches('rpt|rptmanual|rptbatch') }", index=1000)
	public void afterOpenCashReceiptSchema( evt ) {
		interceptOpenReceipt( evt );  
	} 

	@After(pattern="CashReceiptService.open", eval="#{result.formno=='56'}", index=1000) 
	public void interceptOpenReceipt( evt ) {
		def receipt = evt.result
		svc.open(receipt)
		if (receipt.txntype.matches('online|manual')){
			if (!receipt._items)
				receipt._items = [];
			receipt._items = svc2.getItemsForPrinting(receipt);
			receipt.totaltaxdp = 0.00;
			receipt.totaltaxdue = 0.00;
			receipt._items.each{
				receipt.totaltaxdp += it.taxdp;
				receipt.totaltaxdue += it.taxdue;
			}
			util.buildPeriodCovered(receipt._items);
			receipt.itemcount = receipt._items.size();
			if(receipt.itemcount > 0) addLGUInfo(receipt);
			receipt.entityno = entitySvc.open(receipt.payer)?.entityno;
			receipt.checks = "";
			receipt.paymentitems.each{
				receipt.checks += it.refno + " " + it.bank + " " + it.refdate.toString().substring(0, it.refdate.toString().indexOf(' ')) + "\n";
			}
		}
	}
	
	@After(pattern="CashReceiptService.post", eval="#{result.formno=='56'}", index=1000) 
	public void interceptPostReceipt( evt ) {
		def receipt = evt.result
		svc.open(receipt)
		if (receipt.txntype.matches('online|manual')){
			if (!receipt._items)
				receipt._items = [];
			receipt._items = svc2.getItemsForPrinting(receipt);
			receipt.totaltaxdp = 0.00;
			receipt.totaltaxdue = 0.00;
			receipt._items.each{
				receipt.totaltaxdp += it.taxdp;
				receipt.totaltaxdue += it.taxdue;
			}
			util.buildPeriodCovered(receipt._items);
			receipt.itemcount = receipt._items.size();
			if(receipt.itemcount > 0) addLGUInfo(receipt);
			receipt.entityno = entitySvc.open(receipt.payer)?.entityno;
			receipt.checks = "";
			receipt.paymentitems.each{
				receipt.checks += it.refno + " " + it.bank + " " + it.refdate.toString().substring(0, it.refdate.toString().indexOf(' ')) + "\n";
			}
		}
	}

	void addLGUInfo( receipt ) {
		if("province".equalsIgnoreCase(var.lgu_type)) {
			receipt.lguname = receipt._items.collect{[munidistrict: it.munidistrict]}.unique{it.munidistrict}*.munidistrict.join('/')
			receipt.parentlguname = receipt._items[0].provcity 
		} else if ("city".equalsIgnoreCase(var.lgu_type)) { 
			def i = receipt._items[0]
			receipt.lguname = i.provcity  
		} else {
			def i = receipt._items[0]
			receipt.lguname = i.munidistrict
			receipt.parentlguname = i.provcity 
		}
	}

}

